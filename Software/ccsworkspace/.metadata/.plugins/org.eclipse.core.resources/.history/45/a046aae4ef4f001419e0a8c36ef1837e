#include <msp430.h>
#include "LCD.h"
#include "lightSense.h"
#include "helpers.h"

volatile unsigned int adc_val;

void main(void) {
	WDTCTL = WDTPW + WDTHOLD;
	unsigned long lux;
	char* reading;
	LCD_init();
	LCD_gotoXY(0,2);
	LCD_writeString("LR:");

	ADC10CTL0 &= ~ENC;							// Switch off ADC.. (Can't set if enabled)

	ADC10CTL1 = INCH_3;						// Select (p1.3)
//		ADC10CTL0 = SREF_1 + ADC10SHT_2 + REFON + ADC10ON + ADC10IE + REF2_5V;

	ADC10CTL0 = SREF_1 + REF2_5V + ADC10SHT_3 + REFON + ADC10ON + ADC10IE;
												// Range to 2.5V reference, Max Sample and hold time
												// turn on reference, turn on the ADC and enable Interrupts
	__delay_cycles(140); 							// Allow time for the reference voltage to settle
	ADC10CTL0 |= ENC + ADC10SC;					// enable the encoder and start conversion
	__bis_SR_register(CPUOFF + GIE);			// Turn off the CPU and allow interrupts (ISR turns on CPU)

	adc_val = ADC10MEM;							// Put the ADC value into var
	//LCD_writeString(convertADC(adc_val,-1));		// Write out the converted value
	LCD_gotoXY(28,2);							// Move to next line
	LCD_writeChar('(');
	volts = adc_val;
	volts *= 5000;
	volts /= 1023;

	LCD_writeString(convertADC(volts,100));
	LCD_writeString("V)");
}

#pragma vector=ADC10_VECTOR
__interrupt void ADC10_ISR(void) {
	__bic_SR_register_on_exit(CPUOFF);
}

