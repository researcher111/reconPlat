#include <msp430.h>
#include "LCD.h"
#include "tempSense.h"
#include "helpers.h"

volatile unsigned int adc_val;

void main(void) {
	unsigned long volts;
	unsigned long lux;
	unsigned long degrees;
	char* reading;
	WDTCTL = WDTPW + WDTHOLD;
	LCD_init();
	while(1) {
/*	**************************************************************************
*	Write out the Temperature ADC Values*/
		LCD_gotoXY(0,1);
		LCD_writeString("AT:");

		degrees = tempSense();
		LCD_writeChar('(');
		reading = convertADC(degrees,1);
		LCD_writeString(reading);
		LCD_writeChar(0x7f);
		LCD_writeString("C)");

/*	**************************************************************************
*	Write out the VCC/2 ADC Values
*
*/
		LCD_gotoXY(0,2);
		LCD_writeString("LR:");
		LCD_gotoXY(28,2);							// Move to next line
		LCD_writeChar('(');
		volts = lightSense();
		volts *= 5000;
		volts /= 1023;

		LCD_writeString(convertADC(volts,100));
		LCD_writeString("V)");


/*	**************************************************************************
*	Write out the MIC ADC Values (Pin 1.4)
*
*/


		LCD_gotoXY(0,4);							// Move to next line

		LCD_writeString("MIC:  ");
		ADC10CTL0 &= ~ENC;							// Turn off ADC so we can change settings

		ADC10CTL1 = INCH_4 + ADC10DIV_0;			// Channel 3 (pin 1.4)
		ADC10CTL0 = SREF_0 + ADC10SHT_2 + ADC10ON + ADC10IE;	// Shorter sample and hold time, turn on ADC and use interrupts
		ADC10AE0 |= BIT3;							// Enable bit 3
		ADC10CTL0 |= ENC + ADC10SC;					// Start the conversion
		__bis_SR_register(CPUOFF + GIE);			// Turn off CPU and enable interrupts (ISR re-enables CPU)

		adc_val = ADC10MEM;
		LCD_writeString(convertADC(adc_val,-1));


	}
}

#pragma vector=ADC10_VECTOR
__interrupt void ADC10_ISR(void) {
	__bic_SR_register_on_exit(CPUOFF);
}
